#!/usr/bin/env perl
# try -h
# Make a "patch" in a project, extract it to a lib, with skeleton .cpp


use strict; use warnings; no warnings 'uninitialized'; use 5.010; no if ($^V ge v5.18.0), warnings => 'experimental::smartmatch';
use File::Glob ':bsd_glob';
use File::Basename qw(basename dirname);
use File::Spec;
use Cwd;
use IO::File;
use JSON;
use awgrover::Getopt;
use Carp;

our $workspace = "/home/".$ENV{'USER'}.'/xod';
our $switches;
our %cppType = (
    string => 'XString',
    number => 'int|uint8_t|float',
    boolean => 'Logic|boolean',
    pulse => 'Logic|boolean',
    );

sub debug(&) {
    if ($ENV{'DEBUG'}) {
      my @lines = &{$_[0]};
      my $at = (caller(0))[2];
      warn "[DEBUG $at] ". $lines[0]."\n";
      for ( @lines[1..(@lines-1)] ) {
        warn "[DEBUG ".(' ' x length("".$at))."] ". $_ . "\n";
        }
      }
    }

sub warning {
    warn "WARNING ",@_,"\n";
    }

sub find_project {
    my ($want) = @_;
    debug { "Look for project in $workspace for $want/project.xod..."; };
    # FIXME strip project.xod, strip workspace, ... or converse rather
    # If it's a patch, strip it back to project
    # allow relative to here (./)
    if (-e "$workspace/$want/project.xod") {
        debug { "  found project '$workspace'/'$want'" };
        "$workspace/$want";
        }
    else {
        debug { "  not found project '$want'" };
        undef;
        }
    }

sub find_patch {
    my ($project, $want) = @_;
    debug { "Look for patch '$project' / '$want'..."; };
    my $full_path = !$project ? $want : "$project/$want"; # allows ./
    debug { "  start with path $full_path"; };
    if (-d $full_path) {
        debug { "  it's a dir..." };
        $full_path .= "/patch.xodp"
        }

    if ($full_path =~ /\.xodp$/) {
        debug { "  at $full_path?" };
        if (-e $full_path) {
            debug { "  found patch $full_path" };
            return $full_path
            }
        else {
            debug { "  no patch at path $full_path" };
            return undef;
            }
        }

    $full_path .= ".xodp";
    debug { "  at + .xodp?" };
    if (-e $full_path) { 
        debug { "  found patch $full_path" };
        return $full_path
        }
    else {
        debug { "  no patch at path $full_path" };
        return undef;
        }
    }

sub search_project {
    my ($want) = @_;
    debug { "Search in $workspace for ~$want/project.xod..."; };
    my $i=0;
    foreach (bsd_glob( "$workspace/*$want*/project.xod", GLOB_NOCASE )) {
        if (!$i) {
            say "## Maybe you meant projects:";
            $i=1;
            }
        my $project = dirname($_);
        $project =~ s/^\Q$workspace\E\///;
        say "\t$project";
        }
    warn "No projects found\n" if $i==0;
    }

sub patch_to_lib {
    # Move the patch
    # project patch lib # project/patch -> lib
    # patch lib # patch -> lib # deduce project from path

    # FIXME: if 2 then patch, new
    # if 3 then project patch new
    debug { "ARGV '".join("' '",@ARGV)."'" };

    my $expected_more = sub {
        # debug { "test argv ".scalar(@ARGV)." '".join("' '",@ARGV)."'" };
        if (@ARGV==0) {
            warn "Expected patchpath,newlibpath or projectpath,patchpath,newlibpath\n";
            exit 1;
            }
        };

    &$expected_more();

    my $full_patch_path;

    # $patch_path, $newpath
    if (@ARGV==2 || @ARGV==1) {
        $full_patch_path = find_patch_or_failsearch(undef, $ARGV[0]);
        }
    if ($full_patch_path) {
        debug { 'ARGV was $patch_name, $newpath' };
        shift @ARGV; # so next is newlib
        }

    else {
        debug { 'ARGV must be $project_path, $patch_name, $newpath' };

        # find or search...
        my $project_path = $ARGV[0];
        my $full_project_path = find_project($project_path);
        if (!$full_project_path) {
            warning "No such project $project_path";
            search_project($project_path); # FIXME: should do phonetic/typo matching
            exit(1);
            }
        shift @ARGV;

        &$expected_more();

        # search patchname->fullpath
        my $patch_name = $ARGV[0];
        $full_patch_path = find_patch_or_failsearch($full_project_path, $patch_name);
        shift @ARGV;
        }
    debug { "Have patch $full_patch_path" };

    &$expected_more();

    # check newpath in lib, maybe warn
    my $newlibpath = shift @ARGV;
    # __lib__/$name/$path, $name/$path (in __lib__), existing, no $name part, no $path part
    # with .cpp or .xodp
    # ./.... obviates __lib__/ test

    debug { "Figure new lib path..." };
    if ($newlibpath =~ /\.(cpp|xodp)/) {
        debug { "  strip .cpp/.xodp file parth" };
        $newlibpath = dirname($newlibpath);
        }

    if ($newlibpath !~ /^__lib__\// && ($newlibpath =~ /^\.\// || (-d $newlibpath)) ) {
        # relative, or existing, so I guess you mean it
        # But if you say __lib__/...., and it's relative to cwd(), then you don't "really mean it"
        # no fixup
        debug { "  newlib .||-d: '$newlibpath'..." };
        my $canonpath = Cwd::abs_path($newlibpath); # assume this is the salient path # was File::Spec->canonpath( $newlibpath );
        $canonpath =~ /__lib__\//;
        my ($beforelib, $justlibpath) = ($`.$& || ($& ? '' : $newlibpath."/"),$');
        my $partct = split('/', $justlibpath);
        if ($newlibpath =~ /^__lib__(\/|$)/ || $partct != 3 ) {
            my @possible = ('$owner', '$libname', '$patchname');
            debug { "    partct $partct of $justlibpath of canon $canonpath" };
            my $meantmore = join("/", @possible[ ($partct)..$#possible ]);
            warning "You probably meant $beforelib$meantmore, because this is not deep enough under __lib__/";
            }
        }
    else {
        if ($newlibpath !~ /^__lib__\//) {
            $newlibpath = "__lib__/$newlibpath" 
            }
        my $actualworkspace = (-d $newlibpath) ? "." : $workspace; # could be relative to here

        debug { "  in library $newlibpath..." };
        my $partct = split('/', $newlibpath) - 1;
        if ($partct == 2) {
            $newlibpath = "$newlibpath/".basename(dirname($full_patch_path));
            debug { "  imply patch name from source patch name " };
            $partct = 3;
            }
        if ($partct != 3) {
            warn 'libraries have three level names: $owner/$libname/$patchname'."\n";
            if (-d $newlibpath) {
                warn "maybe you meant one of\n";
                foreach ( bsd_glob("$actualworkspace/$newlibpath/*") ) {
                    $_ =~ s/^\Q$actualworkspace\E\/__lib__\///;
                    warn "\t$_\n";
                    }
                warn "\tor $newlibpath/\$somepatchname\n";
                }
            exit(1);
            }
        $newlibpath = "$actualworkspace/$newlibpath";
        }

    debug { "Into lib $newlibpath..." };
    system('mkdir', $newlibpath) && exit($?); # lib has to exist

    my ($patch_decl, $has_native, $inputs, $outputs) = process_patchfile( $full_patch_path );

    mv_patch($newlibpath, $full_patch_path, $patch_decl, $has_native);

    rename_nodes( $newlibpath, $full_patch_path ); 
    }

sub rename_nodes {
  # Fix all references to the patch in the old project to the lib
  my ($newlibpath, $full_patch_path) = @_;
  my $patch_dir = dirname($full_patch_path);
  my $libpatchdir = dirname($newlibpath);

  # The patches in $full_patch_path/.. are @/basename()
  my $nodename = basename($patch_dir);
  my $project = dirname($patch_dir);
  my $libname = basename(dirname($libpatchdir))."/".basename($libpatchdir);
  my $lib_patch_name = "$libname/$nodename";
  debug {"Change old @/$nodename to $lib_patch_name"};

  my $patch_ct = 0;
  foreach my $patch ( glob("$project/*/patch.xodp") ) {
    $patch_ct += 1;
    my $xodp = xodp( $patch );
    my $changed = 0;
    for my $node (@{$xodp->{'nodes'}}) {
      next if $node->{'type'} ne "@/$nodename";
      $node->{'type'} = $lib_patch_name;
      $changed += 1;
      }
    if ($changed) {
      if (!$switches->{'n'}) {
        my $fh = IO::File->new( $patch, 'w') || die($!);
        say $fh to_json_string($xodp);
        $fh->close;
        }
      else {
        if ($ENV{'DEBUG'}) {
          say "--- $patch";
          say to_json_string($xodp);
          say "---";
          }
        }
      }
      warn "#" .($switches->{'n'} ? "(didn't)" : '') . " update $changed type in $patch\n" if $changed;
    }
  debug { "Checked $patch_ct patches"};


  # don't overwrite existing
  }

sub xodp {
  my ($patch_path) = @_;
  local @ARGV = $patch_path;
  confess "no such $patch_path" if ! -e $patch_path;
  decode_json(join("",<>));
  }

sub process_patchfile {
    my ($full_patch_path) = @_;

    my $patch_decl = xodp($full_patch_path);
    # warn "json: ".Dumper($patch_decl)." "; use Data::Dumper;
    debug { "Read $full_patch_path: ". join(" ", sort keys %$patch_decl) . ": " };
    debug { map { chomp; "\t\"$_\"" } split "\n", $patch_decl->{'description'} };

    my $has_native = 0;
    my $has_non_xod_patch = 0;
    my @inputs;
    my @outputs;
    debug { "Nodes..." };
    foreach ( @{ $patch_decl->{'nodes'} ||[]} ) {
        $has_native +=1 if $_->{'type'} eq 'xod/patch-nodes/not-implemented-in-xod';
        $has_non_xod_patch +=1 if $_->{'type'} !~ /^xod\/patch-nodes/;
        if ($_->{'type'} =~ /^xod\/patch-nodes\/input-(.*)/) {
            my $type = $1;
            push @inputs, { type => $type, name => $_->{'label'} };
            }
        if ($_->{'type'} =~ /^xod\/patch-nodes\/output-(.*)/) {
            my $type = $1;
            push @outputs, { type => $type, name => $_->{'label'} };
            }
        }
    my $has_links = @{ ($patch_decl->{'links'} || []) };

    debug { "  has native $has_native" };
    debug { "  has non i/o $has_non_xod_patch" };
    debug { "  has links ".$has_links };
    debug { "  has inputs ".@inputs.": ".join(" ", map { $_->{'name'} } @inputs) };
    debug { "  has outputs ".@outputs.": ".join(" ", map { $_->{'name'} } @outputs) };
    # warn Dumper(\@inputs); use Data::Dumper;

    my @fails;

    warning "Has no inputs (xod/patch-nodes/input-*), which doesn't make sense" if (!@inputs);
    warning "Has no outputs xod\/patch-nodes/output-*, which might be ok" if !@outputs;

    if ($has_native && $has_links) {
        push @fails, "Has native node (xod/patch-nodes/not-implemented-in-xod) but also links, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ($has_native > 1) {
        push @fails, "Has $has_native > 1 native nodes (xod/patch-nodes/not-implemented-in-xod), which doesn't make sense (in project's patch $full_patch_path)";
        }
    if (!$has_native && !$has_links) {
        push @fails, "Has no native node, and no links, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ($has_native && $has_non_xod_patch) {
        push @fails, "Has native and non 'xod/patch-nodes/*' nodes, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ( !$has_native && -e "$full_patch_path/patch.cpp" ) {
        push @fails, "Has no native but has patch.cpp, which doesn't make sense (in project's patch $full_patch_path)";
        }
    warning "Has native but no patch.cpp" if ( $has_native && !-e "$full_patch_path/patch.cpp" );

    if (@fails) {
        warn "FAIL\n".join("\n", @fails)."\n" ;
        exit(1);
        }
    return ($patch_decl, $has_native, \@inputs, \@outputs);
    }

sub to_json_string {
  my ($xodp) = @_;
  # canonical, etc. "standard xodp"
  my $str = to_json($xodp, {utf8=>1, pretty => 1, canonical=>1}); # can't: , indent_length =>2});
  $str =~ s/^((:?   )+)/ '  ' x (length($1)\/3) /egm;
  $str;
  }

sub mv_patch {
    # mv the patch dir to a new location
    my ($newlibpath, $full_patch_path, $patch_decl, $has_native) = @_;

    my $patchfile = "$newlibpath/".basename($full_patch_path);
    debug { "  will create ".basename($patchfile) };
    
    warning "Needs Description" if !$patch_decl->{'description'};

    if (! $switches->{'n'}) {
      system( 'mv', dirname($full_patch_path), dirname($patchfile) );
      }
    warn "#" .($switches->{'n'} ? "(didn't)" : '') . " move to $patchfile\n";
    }

sub find_patch_or_failsearch {
    my ($project_path, $patch_name) = @_;
    debug { "workspace $workspace" };
    my $found = 
      find_patch($project_path, $patch_name) ||
      find_patch($workspace, $patch_name)
      ;
    return $found if $found;

    $patch_name = "$project_path/$patch_name" if $project_path;
    debug { "Search for patches '$patch_name'..." };

    # proj/patch/x.xodp
    if ($patch_name =~ /\.xodp$/) {
        $patch_name = dirname($patch_name);
        debug { "  trim off file part: $patch_name..." };
        }

    # proj/*.xod
    if ($patch_name =~ /\.xod$/ ) {
        $patch_name = dirname($patch_name)."/*";
        debug { "  trim off file part: $patch_name..." };
        }

    # proj/patch
    my ($projpart,$patchpart) = (basename(dirname($patch_name)), basename($patch_name));
    # $projpart = '*' if $projpart eq '.';
    debug {"  search '$projpart'/'$patchpart' "};
    return if $projpart ne '.' &&
        (
        _find_patch_or_failsearch("$workspace/$projpart/$patchpart") ||
        _find_patch_or_failsearch("$workspace/$projpart/*$patchpart*") ||
        _find_patch_or_failsearch("$workspace/*$projpart*/*$patchpart*") ||
        _find_patch_or_failsearch("$workspace/$projpart/*") ||
        _find_patch_or_failsearch("$workspace/*$projpart*/*") ||
        _find_patch_or_failsearch("$workspace/*/$patchpart*") ||
        _find_patch_or_failsearch("$workspace/*/*$patchpart*")
        ) && exit(1);

    # patch
    (_find_patch_or_failsearch("$workspace/*/$patchpart") ||
    _find_patch_or_failsearch("$workspace/*/*$patchpart*")
    ) && exit(1);

    _find_patch_or_failsearch("$workspace/*/*") && exit(1);
    warn("No patches found\n");
    exit(1)
    }

sub _find_patch_or_failsearch {
    my ($search) = @_;

    debug { "  try '$search'..." };

    my $i=0;
    foreach (bsd_glob("$search/*.xodp")) {
        if (!$i) {
            say "## Maybe you meant patches:";
            $i=1;
            }
        my $where = dirname($_);
        $where =~ s/^\Q$workspace\E\///;
        say "\t".$where;
        }
    return $i!=0;

    }

sub main {
    given ($ARGV[0]) {
        when (/^-/) {
            # ok
            }
        default {
            # ok
            }
        }
    
   $switches=awgrover::Getopt::GetOptions
                (
                '' => <<'EOS',
Move a "patch" in a project to a lib (fixes up old references in project).
Does not know how to cope with custom-types yet.
--- [options] project patch libpath # project/patch -> lib
      project # name in ~/xod, or full path
      patch # dir in project, or dir/something.xodp
      libpath # name in ~/xod/__lib__, destination
--- [options] patch-path libpath # patch -> lib, deduces project-portion
      patch-path # full path to .../$project/$path[/patch.xodp]
      libpath # name in ~/xod/__lib__, destination
EOS
                'help|h|H'=>'this',
                'n' => "don't make changes",
                );

    patch_to_lib;
    }

main();
