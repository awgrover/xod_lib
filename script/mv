#!/usr/bin/env perl
# try -h
# Make a "patch" in a project, extract it to a lib, with skeleton .cpp


use strict; use warnings; no warnings 'uninitialized'; use 5.010; no if ($^V ge v5.18.0), warnings => 'experimental::smartmatch';
use File::Glob ':bsd_glob';
use File::Basename qw(basename dirname);
use File::Spec;
use Cwd;
use IO::File;
use JSON;
use awgrover::Getopt;
use Carp;

use lib 'script';
use XODDebug;

our $switches;

use XODProject;

package main;

sub find_project {
    my ($want) = @_;
    debug { "Look for project in $workspace for $want/project.xod..."; };
    # FIXME strip project.xod, strip workspace, ... or converse rather
    # If it's a patch, strip it back to project
    # allow relative to here (./)
    if (-e "$workspace/$want/project.xod") {
        debug { "  found project '$workspace'/'$want'" };
        "$workspace/$want";
        }
    else {
        debug { "  not found project '$want'" };
        undef;
        }
    }

sub search_project {
    my ($want) = @_;
    debug { "Search in $workspace for ~$want/project.xod..."; };
    my $i=0;
    foreach (bsd_glob( "$workspace/*$want*/project.xod", GLOB_NOCASE )) {
        if (!$i) {
            say "## Maybe you meant projects:";
            $i=1;
            }
        my $project = dirname($_);
        $project =~ s/^\Q$workspace\E\///;
        say "\t$project";
        }
    warning "No projects found\n" if $i==0;
    }

sub path_to_patch {
  my ($path, $relative_path) = @_;

  my $partct = split('/', $path);
  if ($partct==1 && $relative_path) {
    $relative_path->patch($path);
    }

  else {
    XODPatch->new($path, author=>$switches->{'author'});
    }
  }

sub move_or_rename {
    # Move/rename the patch
    # path/patch path # moves to other project|lib, same name
    # path/patch [path/]patch # renames to [other] project|lib
    # path is [absolutepath/]projectname, or [absolutepath/lib|__lib_/]author/libname
    # Changes to a lib require possibly fixup of all other projects
    # And "our" libraries
    # And so require '-a author' for the lib prefix of things that might need fixing
    # It's a lib if __lib__/... or 1/2/3 or lib/...


    if (@ARGV != 2) {
      warn "Expected a from & to\n";
      exit 1;
      }

    my $from = XODProject->factory( dirname($ARGV[0]) )->patch( basename($ARGV[0]) );

    my $author;
    if ( $from->parent->is_library) { 
      if (!$switches->{'author'} ) {
        $author = $from->parent->author;
        warning "assuming $author, to edit all libraries of that author";
        }
      else {
        $author = $switches->{'author'};
        }
      }

    # patch -> rel
    # proj/patch
    # auth/lib/patch

    my $to;

    if ( $ARGV[1] !~ /\// ) {
      $to = $from->parent->patch( $ARGV[1] ); # relative
      }
    else {
      $to = XODProject->factory( $ARGV[1] );  
      }

    # if to is just a project|lib, this is "move, same name"
    if (! $to->isa('XODPatch')) {
      $to = $to->patch( $from->name );
      }
    
    if (!$to->parent->exists) {
      warn "Destination ".$to->parent->type." doesn't exist: ".$to->parent->path;
      exit 2;
      }

    debug { "to ".$to->short_name };

    $from->mv( $to, author => $author );
    }

sub xodp {
  my ($patch_path) = @_;
  local @ARGV = $patch_path;
  die "no such $patch_path" if ! -e $patch_path;
  decode_json(join("",<>));
  }

sub process_patchfile {
    my ($full_patch_path) = @_;

    my $patch_decl = xodp($full_patch_path);
    # warn "json: ".Dumper($patch_decl)." "; use Data::Dumper;
    debug { "Read $full_patch_path: ". join(" ", sort keys %$patch_decl) . ": " };
    debug { map { chomp; "\t\"$_\"" } split "\n", $patch_decl->{'description'} };

    my $has_native = 0;
    my $has_non_xod_patch = 0;
    my @inputs;
    my @outputs;
    debug { "Nodes..." };
    foreach ( @{ $patch_decl->{'nodes'} ||[]} ) {
        $has_native +=1 if $_->{'type'} eq 'xod/patch-nodes/not-implemented-in-xod';
        $has_non_xod_patch +=1 if $_->{'type'} !~ /^xod\/patch-nodes/;
        if ($_->{'type'} =~ /^xod\/patch-nodes\/input-(.*)/) {
            my $type = $1;
            push @inputs, { type => $type, name => $_->{'label'} };
            }
        if ($_->{'type'} =~ /^xod\/patch-nodes\/output-(.*)/) {
            my $type = $1;
            push @outputs, { type => $type, name => $_->{'label'} };
            }
        }
    my $has_links = @{ ($patch_decl->{'links'} || []) };

    debug { "  has native $has_native" };
    debug { "  has non i/o $has_non_xod_patch" };
    debug { "  has links ".$has_links };
    debug { "  has inputs ".@inputs.": ".join(" ", map { $_->{'name'} } @inputs) };
    debug { "  has outputs ".@outputs.": ".join(" ", map { $_->{'name'} } @outputs) };
    # warn Dumper(\@inputs); use Data::Dumper;

    my @fails;

    warning "Has no inputs (xod/patch-nodes/input-*), which doesn't make sense" if (!@inputs);
    warning "Has no outputs xod\/patch-nodes/output-*, which might be ok" if !@outputs;

    if ($has_native && $has_links) {
        push @fails, "Has native node (xod/patch-nodes/not-implemented-in-xod) but also links, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ($has_native > 1) {
        push @fails, "Has $has_native > 1 native nodes (xod/patch-nodes/not-implemented-in-xod), which doesn't make sense (in project's patch $full_patch_path)";
        }
    if (!$has_native && !$has_links) {
        push @fails, "Has no native node, and no links, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ($has_native && $has_non_xod_patch) {
        push @fails, "Has native and non 'xod/patch-nodes/*' nodes, which doesn't make sense (in project's patch $full_patch_path)";
        }
    if ( !$has_native && -e "$full_patch_path/patch.cpp" ) {
        push @fails, "Has no native but has patch.cpp, which doesn't make sense (in project's patch $full_patch_path)";
        }
    warning "Has native but no patch.cpp" if ( $has_native && !-e "$full_patch_path/patch.cpp" );

    if (@fails) {
        warn "FAIL\n".join("\n", @fails)."\n" ;
        exit(1);
        }
    return ($patch_decl, $has_native, \@inputs, \@outputs);
    }

sub to_json_string {
  my ($xodp) = @_;
  # canonical, etc. "standard xodp"
  my $str = to_json($xodp, {utf8=>1, pretty => 1, canonical=>1}); # can't: , indent_length =>2});
  $str =~ s/^((:?   )+)/ '  ' x (length($1)\/3) /egm;
  $str;
  }


sub main {
    
   $switches=awgrover::Getopt::GetOptions
                (
                '' => <<'EOS',
Move a "patch" in a project to a lib (fixes up old references in project).
Does not know how to cope with custom-types yet.
(general would be path/patch [path][/patch] for mv/rename project/lib)
--- [options] project patch libpath # project/patch -> lib
      project # name in ~/xod, or full path
      patch # dir in project, or dir/something.xodp
      libpath # name in ~/xod/__lib__, destination
--- [options] patch-path libpath # patch -> lib, deduces project-portion
      patch-path # full path to .../$project/$path[/patch.xodp]
      libpath # name in ~/xod/__lib__, destination

--- [options] -a author libpath/patch newpatchname # rename, short form of:
--- [options] -a author libpath/patch newlib/newpatchname # mv to another library, fixes all projects, fixes all -a libs
EOS
                'author|a=s' => 'author prefix part for libs',
                'help|h|H'=>'this',
                'n' => "don't make changes",
                );

    move_or_rename;
    }

main();
