#!/usr/bin/env perl
# --- [options] dir ... # produce basic documentation on xod nodes
#       -p n # strip n elements off dir-head for name of lib, default is 0|up-through 'lib'
#       -h n # min header depth. A node gets header depth 1 (markdown #). so -h 3 will give you 3 "###"
#       -n # just the node name/description. no inputs/outputs
#       -1 # just do the first lib node, for debugging
# --- --toc $some.html # insert a toc, making a lot of assumptions about how markdown made the html
# env DEBUG=1 --- ... # output debug stuff


use strict; use warnings; no warnings 'uninitialized'; use 5.010; no if ($^V ge v5.18.0), warnings => 'experimental::smartmatch';
use JSON;
use File::Glob ':bsd_glob';
use Data::Dumper;
my %opts;
use IO::File;

sub debug(&) {
    warn "[DEBUG ". (caller(0))[2]."] ". &{$_[0]}."\n" if $ENV{'DEBUG'};
    }

sub warning {
    warn "WARNING ",@_,"\n";
    }

sub do_dirs {
    my $ct = 0;

    foreach my $where (@_) {
        
        debug { "consider $where" };
        if (! -d $where) {
            warning "Skipping: not a directory '$where'\n";
            next;
            }
        
        if (! -e "$where/patch.xodp" ) {
            my @subdirs = grep { -d $_ } bsd_glob("$where/*");
            if ( @subdirs ) {
                debug { "  sub... ".join(" ",@subdirs) };
                $ct += do_dirs( @subdirs ) 
                }
            else {
                warning "no .xodp, and no subdirs in $where";
                next;
                }
            }
        else {
            $ct += 1;
            do_doc( $where );
            if ($opts{'onlyfirst'}) {exit;}
            }
        }

    return $ct;
    }

sub header {
    my ($thislevel) = @_;
    return ( "#" x ($thislevel + $opts{'header_depth'} - 1) );
    }

sub do_doc {
    my ($dir) = @_;
    debug { "Doc $dir /patch.xodp" };

    push @ARGV, "$dir/patch.xodp";
    my $patch = JSON->new->utf8(0)->decode(join("",<>));
    shift @ARGV;
    # debug { "json: ".Dumper($patch) };

    # lib-name
    my $libname;
    if (! $opts{'strip'} ) {
      $dir =~ /(^|\/)lib\//;
      $libname = $';
      }
    else {
      my @dirpieces = split('/',$dir);
      $libname = join('/', @dirpieces[ $opts{'strip'} .. $#dirpieces ]);
      }
    debug { "Lib '$libname'" };
    say header(1), ' ', $libname;

    my $desc = $patch->{'description'}; $desc =~ s/\s+$//s;
    say $desc;

    return if $opts{'nodeonly'};

    # in x direction which is how they show in xod
    my @sorted = sort { $a->{'position'}->{'x'} <=> $b->{'position'}->{'x'} } @{$patch->{'nodes'}};

    # default/initial values are:
    # $node->['boundValues'] -> $id => $value
    #   the id isn't relevant in patch.xodp

    foreach my $direction (qw(input output)) {
        say header(2)." ".ucfirst($direction)."s";
        my $any = undef;
        foreach my $node ( @sorted ) {
            if ($node->{'type'} =~ /^xod\/patch-nodes\/$direction-/) {
                my $type = $';
                my $default = (values( %{$node->{'boundValues'} || {}} ))[0];
                say "> **", $node->{'label'}, " : ", $type, (defined($default) ? " ($default)" : ''),".**";
                $desc = $node->{'description'}; $desc =~ s/\s+$//s;
                say "> ",$desc if $desc;
                say "";
                $any = 1;
                }
            }
        if (!$any) {
            say "**none**";
            }
        }
    }

sub insert_toc {
  foreach my $f (@_) {
    my $fh = IO::File->new("<$f") or die($!);

    my $depth;
    my @html;
    my %toc;
    my $ct;
    my $last_header;

    while (<$fh>) {
      if ($. == 1) {
        # we assume the first line is a header, and we are interested in top-level headers only
        ($depth) = $_ =~ /<h(\d+)>/;
        if (!$depth) {
          warn "Expected first line to be '<h...>' in $ARGV\n";
          break;
          }
        debug {"TOC $ARGV starts at <h$depth>"};
        }

      # hunt for a header
      if (/<h$depth>([^<]+)</) {
        debug {"  hdr"};
        # { xod => { units => { rad-to-deg => 145 }}}
        $ct += 1;

        my @parts = split('/',$1);
        my $t = \%toc;
        while(@parts > 1) {
          $t = $t->{ $parts[0] } ||= {};
          shift @parts;
          }
        $t->{ $parts[0] } = [$ct];
        $last_header = $t->{ $parts[0] };

        s/>/ id="$ct">/;
        # debug {"  ",$_};
        }

      # add desription fragment to last header
      if ($last_header && /^<p>([^<]+)</) {
        push $last_header, substr($1, 0, 80);
        $last_header = undef;
        }
        
      push @html, $_;
      }

    if (!$depth) {
      warn "Expected first line to be '<h...>' in $ARGV\n";
      next;
      }

    $fh->close;

    debug {"slurped $f ",Dumper(\%toc)};

    $fh = IO::File->new(">$f") or die($!);

    say $fh "<pre>";
    generate_toc($fh, [], \%toc);
    say $fh "</pre>";

    print $fh @html;

    }
  }

sub generate_toc {
  my ($fh, $prefix, $subtoc) = @_;

  # FIXME: if 1 subpart, prefix=x/x/x/, recursee prints at !hash. otherwise prefix=indent
  my $full_prefix = join("/", @$prefix);
  my $indent = ' ' x (length($full_prefix)) ;
  foreach my $part (sort keys %$subtoc) {
    my $subpart = $subtoc->{$part}; # hash for deeper, or $ct
    if ( ref( $subpart ) eq 'ARRAY' ) {
      my ($anchor, $desc) = @$subpart;
      say $fh "$indent<a href='#$anchor'>$part</a> $desc";
      }
    else {
      die "isa ".ref($subpart) if !ref($subpart) eq 'HASH';
      if (keys( %$subpart ) > 7) {
        say $fh "$indent$part/";
        }
      else {
        # collapse if only 1 subpart
        say $fh join("/", @$prefix, $part),"/";
        }
      generate_toc($fh, [@$prefix,$part], $subpart);
      }
    }
  }

$opts{'strip'} = undef;
$opts{'header_depth'} = 1;

while ($ARGV[0] =~ /^-/) {
    given ( $ARGV[0] ) { 
        when ('-p' ) {
            shift @ARGV;
            $opts{'strip'} = shift @ARGV;
            }
        when ('-h' ) {
            shift @ARGV;
            $opts{'header_depth'} = shift @ARGV;
            }
        when ('-=' ) {
            shift @ARGV;
            $opts{'onlymatches'} = shift @ARGV;
            }
        when ('-1' ) {
            shift @ARGV;
            $opts{'onlyfirst'} = 1;
            }
        when ('-n' ) {
            shift @ARGV;
            $opts{'nodeonly'} = 1;
            }
        when ('--toc' ) {
            shift @ARGV;
            $opts{'toc'} = 1;
            }
        otherwise {
            die "what? $_";
            }
        }
    }


if ($opts{'toc'} ) {
  insert_toc(@ARGV);
  }

else {
  die "No directory, did you screw up an option? ",Dumper(\%opts),"\n" if !@ARGV;

  foreach my $firstlevel (@ARGV) {
    my $did = do_dirs($firstlevel);
    warn "Nothing in $firstlevel\n" if $did == 0;
    }
  }
